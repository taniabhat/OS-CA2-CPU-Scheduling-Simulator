import matplotlib.pyplot as plt

class Process:
    def __init__(self, pid, arrival_time, burst_time, priority=0):
        self.pid = pid
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.priority = priority
        self.completion_time = 0
        self.turnaround_time = 0
        self.waiting_time = 0

def fcfs_scheduling(processes):
    processes.sort(key=lambda x: x.arrival_time)
    time = 0
    gantt_chart = []
    for process in processes:
        if time < process.arrival_time:
            time = process.arrival_time
        process.waiting_time = time - process.arrival_time
        time += process.burst_time
        process.completion_time = time
        process.turnaround_time = process.completion_time - process.arrival_time
        gantt_chart.append((process.pid, process.arrival_time, process.completion_time))
    return processes, gantt_chart

def sjn_scheduling(processes):
    processes.sort(key=lambda x: (x.arrival_time, x.burst_time))
    time = 0
    completed = []
    gantt_chart = []
    while processes:
        available = [p for p in processes if p.arrival_time <= time]
        if available:
            available.sort(key=lambda x: x.burst_time)
            process = available[0]
            processes.remove(process)
            process.waiting_time = time - process.arrival_time
            time += process.burst_time
            process.completion_time = time
            process.turnaround_time = process.completion_time - process.arrival_time
            completed.append(process)
            gantt_chart.append((process.pid, process.arrival_time, process.completion_time))
        else:
            time += 1
    return completed, gantt_chart

def round_robin_scheduling(processes, quantum):
    queue = processes[:]
    time = 0
    gantt_chart = []
    while queue:
        process = queue.pop(0)
        if process.burst_time > quantum:
            time += quantum
            process.burst_time -= quantum
            queue.append(process)
        else:
            time += process.burst_time
            process.completion_time = time
            process.turnaround_time = process.completion_time - process.arrival_time
        gantt_chart.append((process.pid, time - process.burst_time, time))
    return processes, gantt_chart

def priority_scheduling(processes):
    processes.sort(key=lambda x: (x.priority, x.arrival_time))
    time = 0
    gantt_chart = []
    for process in processes:
        if time < process.arrival_time:
            time = process.arrival_time
        process.waiting_time = time - process.arrival_time
        time += process.burst_time
        process.completion_time = time
        process.turnaround_time = process.completion_time - process.arrival_time
        gantt_chart.append((process.pid, process.arrival_time, process.completion_time))
    return processes, gantt_chart

def plot_gantt_chart(gantt_chart, title):
    fig, ax = plt.subplots(figsize=(10, 4))
    y_labels = []
    for idx, (pid, start, end) in enumerate(gantt_chart):
        ax.barh(y=idx, width=end-start, left=start, height=0.5, align='center', edgecolor='black')
        ax.text((start+end)/2, idx, f'P{pid}', va='center', ha='center', color='white', fontsize=10, fontweight='bold')
        y_labels.append(f'P{pid}')
    ax.set_yticks(range(len(gantt_chart)))
    ax.set_yticklabels(y_labels)
    ax.set_xlabel('Time')
    ax.set_ylabel('Processes')
    ax.set_title(title)
    plt.show()

def main():
    processes = []
    n = int(input("Enter the number of processes: "))
    for i in range(n):
        arrival_time = int(input(f"Enter arrival time for Process {i+1}: "))
        burst_time = int(input(f"Enter burst time for Process {i+1}: "))
        priority = int(input(f"Enter priority for Process {i+1} (lower number = higher priority): "))
        processes.append(Process(i+1, arrival_time, burst_time, priority))
    
    print("\nChoose Scheduling Algorithm:")
    print("1. FCFS")
    print("2. SJN")
    print("3. Priority Scheduling")
    print("4. Round Robin")
    choice = int(input("Enter your choice (1-4): "))
    
    if choice == 1:
        scheduled_processes, gantt_chart = fcfs_scheduling(processes[:])
        title = "FCFS Gantt Chart"
    elif choice == 2:
        scheduled_processes, gantt_chart = sjn_scheduling(processes[:])
        title = "SJN Gantt Chart"
    elif choice == 3:
        scheduled_processes, gantt_chart = priority_scheduling(processes[:])
        title = "Priority Scheduling Gantt Chart"
    elif choice == 4:
        quantum = int(input("Enter time quantum for Round Robin: "))
        scheduled_processes, gantt_chart = round_robin_scheduling(processes[:], quantum)
        title = "Round Robin Gantt Chart"
    else:
        print("Invalid choice!")
        return
    
    print(f'\n{title}:')
    for p in scheduled_processes:
        print(f'P{p.pid}: AT={p.arrival_time}, BT={p.burst_time}, CT={p.completion_time}, TAT={p.turnaround_time}, WT={p.waiting_time}')
    plot_gantt_chart(gantt_chart, title)

if __name__ == "__main__":
    main()
